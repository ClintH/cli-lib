/* eslint-disable unicorn/no-process-exit */
import kleur from "kleur";
import fs, { WriteStream } from "node:fs";
import { URL } from "node:url";
import { inspect } from "node:util";

function render(m: any): string {
  if (m === null) return `(null)`;
  if (typeof m === `string`) return m;
  if (typeof m === `object`) return inspect(m);
  if (typeof m === `undefined`) return `(undefined)`;
  return `` + m;
}

export type LogOptions = {
  verbose: boolean
  termPrefix: string
  timestamp: boolean
}

export default class LogTerm {
  verboseEnable = false;
  termPrefix: string;
  timestamp: boolean;
  file?: WriteStream;

  constructor(options: Partial<LogOptions> = {}) {
    this.termPrefix = options.termPrefix ?? ``;
    this.verboseEnable = options.verbose ?? false;
    this.timestamp = options.timestamp ?? false;

    this.termPrefix = this.termPrefix.length > 0 ? this.termPrefix + ` ` : ` Â· `;
  }

  fileOutput(path: string) {
    if (this.file !== undefined) {
      this.fileWrite(`Log closed`);
      this.file.close();
    }

    this.file = fs.createWriteStream(path, { autoClose: true, flags: `a` });
    this.fileWrite(`Log started`);
  }

  fileWrite(line: string) {
    if (this.file) {
      this.file.write(new Date().toISOString() + `\t` + line + `\n`);
    }
  }

  locatePackage() {
    let prefix = ``;
    while (prefix.length < 7) {
      const path = new URL(prefix + `package.json`, import.meta.url);
      if (fs.existsSync(path)) return path;
      prefix += `../`;
    }
    throw new Error(`Could not resolve package`);
  }

  appHeader() {
    let version = `?`;
    let name = `app`;
    try {
      const path = this.locatePackage();
      const json = JSON.parse(fs.readFileSync(path).toString());
      name = json.name;
      version = json.version;
    } catch (error) {
      this.error(`Could not load package.json`);
      this.error(error as string);
      process.exit(1);
    }

    const title = `${ name } ${ version }`;

    console.log(kleur.gray(`-`.repeat(title.length)));
    console.log(kleur.blue(title));
    console.log(kleur.gray(`-`.repeat(title.length)));
  }

  getLinePrefix() {
    if (this.timestamp) {
      const now = Date.now();
      return kleur.gray(now);
    } else {
      return ``;
    }
  }

  info(message: string, subM: any = ``) {
    let bit = kleur.white(this.termPrefix) + message;
    if (Number.parseInt(message[ 0 ]) && message[ 1 ] === `.` && message[ 2 ] === ` `) {
      // Assume a numbered list
      bit = kleur.bold().white(message.slice(0, 2)) + message.slice(2);
    }
    subM = render(subM);
    if (subM.length > 0) bit += ` ` + kleur.grey(subM);
    console.log(this.getLinePrefix() + bit);
    this.fileWrite(`INFO \t` + message + ` ` + subM);
  }

  termHeader(message: string) {
    const bit = kleur.blue().underline(message);
    console.log();
    console.log(bit);
    console.log();
  }

  termEmphasis(message: string) {
    const messageLines = message.split(`\n`);
    for (const m of messageLines) {
      console.log(kleur.cyan(this.termPrefix) + m.trim());
    }
  }

  verbose(message: string, subM: any = ``) {
    if (!this.verboseEnable) return;
    let bit = kleur.gray(this.termPrefix) + message;
    subM = render(subM);
    if (subM.length > 0) bit += ` ` + kleur.grey(subM);
    console.log(bit);
    this.fileWrite(`DEBUG\t` + message + ` ` + subM);

  }

  separator() {
    console.log();
    console.log(kleur.cyan(this.termPrefix) + kleur.cyan(kleur.bold(`-----`)));
    console.log();
    this.fileWrite(`---- `);
  }

  error(message: unknown) {
    if (message instanceof Error) {
      this.errorString(message.message);
    } else {
      this.errorString(message as string);
    }
  }

  errorString(message: string) {
    console.log(kleur.bold(kleur.red().bgBlack(this.termPrefix + `Error `)) + message);
    this.fileWrite(`ERROR\t` + message);

  }

  warn(message: string, subM = ``) {
    let bit = kleur.bold(kleur.magenta().bgBlack(this.termPrefix + `Warn `)) + message;
    subM = render(subM);
    if (subM.length > 0) bit += ` ` + kleur.grey(subM);
    console.log(bit);
    this.fileWrite(`WARN \t` + message + ` ` + subM);
  }

}